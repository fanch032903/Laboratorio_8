/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdint.h>
#include<stdio.h>
#include<string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
uint8_t contador1=0;
uint8_t contador2=0;

uint8_t buffer[1];

volatile uint8_t juego_begin = 0; // 0: Bloqueado/Ganador, 1: Semáforo en curso, 2: Jugando
volatile uint8_t iniciar = 0;        // Estado de la carrera

volatile uint32_t ultplayer1=0;
volatile uint32_t ultplayer2=0;
volatile uint32_t tiempo_sem_inicio = 0; // Variable para el delay del semáforo
const uint32_t TIEMPO_LED = 1000;      // (1 segundo) por cada LED

uint8_t ganador1[]="Jugador 1 es el ganador \r\n";
uint8_t ganador2[]="Jugador 2 es el ganador \r\n";

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, buffer, 1);
  HAL_UART_Transmit(&huart2, (uint8_t *)"STM32 listo\r\n", 13, 100); //Ver que este enviando el RX


  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uint32_t current_tick = HAL_GetTick(); // Leer el tiempo

      // Semáforo
      if (juego_begin == 1)
      {
          // Iniciar con la LED roja
          if (iniciar == 1)
          {
              HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
              HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
              HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, GPIO_PIN_RESET);
              tiempo_sem_inicio = current_tick;
              iniciar = 2; //espera para encender la amarilla
          }

          // LED amarilla
          else if (iniciar == 2 && (current_tick - tiempo_sem_inicio) >= TIEMPO_LED)
          {
              HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
              HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
              tiempo_sem_inicio = current_tick;
              iniciar = 3;
          }

          // LED verde
          else if (iniciar == 3 && (current_tick - tiempo_sem_inicio) >= TIEMPO_LED)
          {
              HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
              HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, GPIO_PIN_SET);
              tiempo_sem_inicio = current_tick;
              iniciar = 5;
          }

          // Finalizan las LEDs
          else if (iniciar == 5 && (current_tick - tiempo_sem_inicio) >= TIEMPO_LED)
          {
              HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, GPIO_PIN_RESET);
              iniciar = 4;        //desbloquear los botones
              juego_begin = 2;
              HAL_UART_Transmit(&huart2, (uint8_t *)"GO!\r\n", 25, 100);
          }
      }

      // Identificar al ganador

      if (iniciar == 4)
      {

          if (contador1 >= 4)
          {

              iniciar = 0;        // Bloquea los botones
              juego_begin = 0; // Espera el comando 'S'
              contador1 = 4;
              HAL_UART_Transmit(&huart2, ganador1, sizeof(ganador1), 100);
          }
          else if (contador2 >= 4)
          {

              iniciar = 0;
              juego_begin = 0;
              contador2 = 4;
              HAL_UART_Transmit(&huart2, ganador2, sizeof(ganador2), 100);
          }
      }

      // Contadores con las LEDs


      // Contador Jugador 1
      switch(contador1){
      case 0:
          HAL_GPIO_WritePin(LED_P1_GPIO_Port, LED_P1_Pin, 0);
          HAL_GPIO_WritePin(LED_P2_GPIO_Port, LED_P2_Pin, 0);
          HAL_GPIO_WritePin(LED_P3_GPIO_Port, LED_P3_Pin, 0);
          HAL_GPIO_WritePin(LED_P4_GPIO_Port, LED_P4_Pin, 0);
          break;
      case 1:
          HAL_GPIO_WritePin(LED_P1_GPIO_Port, LED_P1_Pin, 1);
          HAL_GPIO_WritePin(LED_P2_GPIO_Port, LED_P2_Pin, 0);
          HAL_GPIO_WritePin(LED_P3_GPIO_Port, LED_P3_Pin, 0);
          HAL_GPIO_WritePin(LED_P4_GPIO_Port, LED_P4_Pin, 0);
          break;
      case 2:
          HAL_GPIO_WritePin(LED_P1_GPIO_Port, LED_P1_Pin, 0);
          HAL_GPIO_WritePin(LED_P2_GPIO_Port, LED_P2_Pin, 1);
          HAL_GPIO_WritePin(LED_P3_GPIO_Port, LED_P3_Pin, 0);
          HAL_GPIO_WritePin(LED_P4_GPIO_Port, LED_P4_Pin, 0);
          break;
      case 3:
          HAL_GPIO_WritePin(LED_P1_GPIO_Port, LED_P1_Pin, 0);
          HAL_GPIO_WritePin(LED_P2_GPIO_Port, LED_P2_Pin, 0);
          HAL_GPIO_WritePin(LED_P3_GPIO_Port, LED_P3_Pin, 1);
          HAL_GPIO_WritePin(LED_P4_GPIO_Port, LED_P4_Pin, 0);
          break;
      case 4:
          HAL_GPIO_WritePin(LED_P1_GPIO_Port, LED_P1_Pin, 0);
          HAL_GPIO_WritePin(LED_P2_GPIO_Port, LED_P2_Pin, 0);
          HAL_GPIO_WritePin(LED_P3_GPIO_Port, LED_P3_Pin, 0);
          HAL_GPIO_WritePin(LED_P4_GPIO_Port, LED_P4_Pin, 1);
          break;
      }

      // Contadore Jugador 2
      switch(contador2){
      case 0:
          HAL_GPIO_WritePin(LED_J1_GPIO_Port, LED_J1_Pin, 0);
          HAL_GPIO_WritePin(LED_J2_GPIO_Port, LED_J2_Pin, 0);
          HAL_GPIO_WritePin(LED_J3_GPIO_Port, LED_J3_Pin, 0);
          HAL_GPIO_WritePin(LED_J4_GPIO_Port, LED_J4_Pin, 0);
          break;
      case 1:
          HAL_GPIO_WritePin(LED_J1_GPIO_Port, LED_J1_Pin, 1);
          HAL_GPIO_WritePin(LED_J2_GPIO_Port, LED_J2_Pin, 0);
          HAL_GPIO_WritePin(LED_J3_GPIO_Port, LED_J3_Pin, 0);
          HAL_GPIO_WritePin(LED_J4_GPIO_Port, LED_J4_Pin, 0);
          break;
      case 2:
          HAL_GPIO_WritePin(LED_J1_GPIO_Port, LED_J1_Pin, 0);
          HAL_GPIO_WritePin(LED_J2_GPIO_Port, LED_J2_Pin, 1);
          HAL_GPIO_WritePin(LED_J3_GPIO_Port, LED_J3_Pin, 0);
          HAL_GPIO_WritePin(LED_J4_GPIO_Port, LED_J4_Pin, 0);
          break;
      case 3:
          HAL_GPIO_WritePin(LED_J1_GPIO_Port, LED_J1_Pin, 0);
          HAL_GPIO_WritePin(LED_J2_GPIO_Port, LED_J2_Pin, 0);
          HAL_GPIO_WritePin(LED_J3_GPIO_Port, LED_J3_Pin, 1);
          HAL_GPIO_WritePin(LED_J4_GPIO_Port, LED_J4_Pin, 0);
          break;
      case 4:
          HAL_GPIO_WritePin(LED_J1_GPIO_Port, LED_J1_Pin, 0);
          HAL_GPIO_WritePin(LED_J2_GPIO_Port, LED_J2_Pin, 0);
          HAL_GPIO_WritePin(LED_J3_GPIO_Port, LED_J3_Pin, 0);
          HAL_GPIO_WritePin(LED_J4_GPIO_Port, LED_J4_Pin, 1);
          break;
      }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_J4_Pin|LED_V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LED_A_Pin|LED_R_Pin|LED_J3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_P1_Pin|LED_P3_Pin|LED_P4_Pin|LED_J1_Pin
                          |LED_J2_Pin|LED_P2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_J4_Pin LED_V_Pin */
  GPIO_InitStruct.Pin = LED_J4_Pin|LED_V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin LED_A_Pin LED_R_Pin LED_J3_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LED_A_Pin|LED_R_Pin|LED_J3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LED_P1_Pin LED_P3_Pin LED_P4_Pin LED_J1_Pin
                           LED_J2_Pin LED_P2_Pin */
  GPIO_InitStruct.Pin = LED_P1_Pin|LED_P3_Pin|LED_P4_Pin|LED_J1_Pin
                          |LED_J2_Pin|LED_P2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : BOT_P1_Pin */
  GPIO_InitStruct.Pin = BOT_P1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BOT_P1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : BOT_P2_Pin */
  GPIO_InitStruct.Pin = BOT_P2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BOT_P2_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if (huart->Instance == USART2)
    {
        // debug
        HAL_UART_Transmit(&huart2, buffer, 1, 100);

        // S mayuscula o s minuscula
        if (buffer[0] == 'S' || buffer[0] == 's')
        {
            if (juego_begin == 0) //
            {
            	juego_begin = 1; //

                // Reiniciar contadores
                contador1 = 0;
                contador2 = 0;
                iniciar = 1; // /*INICIA EN ROJO

                // APAGAR LAS LEDS
                HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
                HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
                HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, GPIO_PIN_RESET);
            }
        }

        // Reactiva la recepción de UART
        HAL_UART_Receive_IT(&huart2, buffer, 1);
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
    uint32_t current_tick = HAL_GetTick();

    // Boton Player 1
    if (GPIO_Pin == BOT_P1_Pin)
    {
        // Esperar
        if ((current_tick - ultplayer1) > 200)
        {
            // Inicia despues de la LED verde
            if (iniciar == 4 && contador1 < 4) // Cambia cuando el juego ha iniciadp
            {
                contador1++;

            }
            ultplayer1 = current_tick;
        }
    }

    // Boton Player 2
    else if (GPIO_Pin == BOT_P2_Pin)
    {
        //
        if ((current_tick - ultplayer2) > 200)
        {
            //
            if (iniciar == 4 && contador2 < 4) // Cambia cuando el juego ha iniciado
            {
                contador2++;

            }
            ultplayer2 = current_tick;
        }
    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
